From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <wangxyper@163.com>
Date: Wed, 23 Aug 2023 14:21:16 -0400
Subject: [PATCH] Cache minecart vehicle collision results

Co-authored-by: MrHua269 <wangxyper@163.com>

Cache minecart vehicle collision results to prevent lag causing by massive stacked minecart
The known issue: entity can't enter the minecart after enabling this!

diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index eb5bd5cfd131042e366872bf599a315d83dc732b..ce07e75c4faf30520c74016c4ff31be1cc1c9af7 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -5,6 +5,8 @@ import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.UnmodifiableIterator;
 import com.mojang.datafixers.util.Pair;
+
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -294,6 +296,15 @@ public abstract class AbstractMinecart extends VehicleEntity {
         return this.flipped ? this.getDirection().getOpposite().getClockWise() : this.getDirection().getClockWise();
     }
 
+    // Leaf start - Cache minecart vehicle collision results
+    private List<Entity> lastCollideCache = new ArrayList<>();
+    private void checkAndUpdateCache(boolean ride) {
+        if (this.tickCount % 30 == 0) {
+            this.lastCollideCache = ride ? this.level().getEntities((Entity) this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D), EntitySelector.pushableBy(this)) : this.level().getEntities(this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D));
+        }
+    }
+    // Leaf end
+
     @Override
     public void tick() {
         // Purpur start
@@ -390,14 +401,13 @@ public abstract class AbstractMinecart extends VehicleEntity {
             }
             // CraftBukkit end
             if (this.getMinecartType() == AbstractMinecart.Type.RIDEABLE && this.getDeltaMovement().horizontalDistanceSqr() > 0.01D) {
-                List<Entity> list = this.level().getEntities((Entity) this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D), EntitySelector.pushableBy(this));
+                // Leaf start - Cache minecart vehicle collision results
+                if (org.dreeam.leaf.LeafConfig.cacheMinecartCollision) this.checkAndUpdateCache(true);
+                List<Entity> list = org.dreeam.leaf.LeafConfig.cacheMinecartCollision ? this.lastCollideCache : this.level().getEntities((Entity) this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D), EntitySelector.pushableBy(this));; // Leaf - Cache minecart vehicle collision results
 
                 if (!list.isEmpty()) {
-                    Iterator iterator = list.iterator();
-
-                    while (iterator.hasNext()) {
-                        Entity entity = (Entity) iterator.next();
 
+                    for (Entity entity : list) {
                         if (!(entity instanceof Player) && !(entity instanceof IronGolem) && !(entity instanceof AbstractMinecart) && !this.isVehicle() && !entity.isPassenger()) {
                             // CraftBukkit start
                             VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity.getBukkitEntity());
@@ -424,11 +434,10 @@ public abstract class AbstractMinecart extends VehicleEntity {
                     }
                 }
             } else {
-                Iterator iterator1 = this.level().getEntities(this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D)).iterator();
-
-                while (iterator1.hasNext()) {
-                    Entity entity1 = (Entity) iterator1.next();
+                if (org.dreeam.leaf.LeafConfig.cacheMinecartCollision) this.checkAndUpdateCache(false); // Leaf - Cache minecart vehicle collision results
+                List<Entity> list2 = org.dreeam.leaf.LeafConfig.cacheMinecartCollision ? this.lastCollideCache : this.level().getEntities(this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D));; // Leaf - Cache minecart vehicle collision results
 
+                for (Entity entity1 : list2) {
                     if (!this.hasPassenger(entity1) && entity1.isPushable() && entity1 instanceof AbstractMinecart) {
                         // CraftBukkit start
                         VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity1.getBukkitEntity());
@@ -442,6 +451,7 @@ public abstract class AbstractMinecart extends VehicleEntity {
                     }
                 }
             }
+            // Leaf end
 
             this.updateInWaterStateAndDoFluidPushing();
             if (this.isInLava()) {
diff --git a/src/main/java/org/dreeam/leaf/LeafConfig.java b/src/main/java/org/dreeam/leaf/LeafConfig.java
index c15d539bc84e57c8ad6e4d4d27b6e43c559581e0..78652c7dffffd0f0249a944f96ae90e82cfde282 100644
--- a/src/main/java/org/dreeam/leaf/LeafConfig.java
+++ b/src/main/java/org/dreeam/leaf/LeafConfig.java
@@ -208,6 +208,7 @@ public class LeafConfig {
     public static int asyncPathfindingKeepalive = 60;
     public static boolean enableAsyncEntityTracker = false;
     public static boolean enableAsyncEntityTrackerInitialized;
+    public static boolean cacheMinecartCollision = false;
     private static void performance() {
         boolean asyncMobSpawning = getBoolean("performance.enable-async-mob-spawning", enableAsyncMobSpawning,
                 "Whether or not asynchronous mob spawning should be enabled.",
@@ -276,6 +277,8 @@ public class LeafConfig {
             enableAsyncEntityTrackerInitialized = true;
             enableAsyncEntityTracker = asyncEntityTracker;
         }
+        cacheMinecartCollision = getBoolean("performance.cache-minecart-collision", cacheMinecartCollision,
+                "Cache the minecart collision result to prevent massive stacked minecart lag the server.");
     }
 
     public static boolean jadeProtocol = false;
