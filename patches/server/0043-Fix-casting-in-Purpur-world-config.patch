From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dreeam <61569423+Dreeam-qwq@users.noreply.github.com>
Date: Tue, 24 Oct 2023 20:02:48 -0400
Subject: [PATCH] Fix casting in Purpur world config


diff --git a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
index 359dc08ffa2c89f5194387d01b42c3aec536e117..88c9389f27f51a6423dfa4c71cf353b8b417e602 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
@@ -678,7 +678,7 @@ public class PurpurWorldConfig {
             dropsMap.forEach((itemId, chance) -> {
                 Item item = BuiltInRegistries.ITEM.get(new ResourceLocation(itemId.toString()));
                 if (item == Items.AIR) { PurpurConfig.log(Level.SEVERE, "Invalid item for `tools.axe.strippables." + blockId + ".drops`: " + itemId); return; }
-                drops.put(item, (double) chance);
+                drops.put(item, (Double) chance); // Leaf - Fix casting
             });
             axeStrippables.put(block, new Strippable(into, drops));
         });
@@ -732,7 +732,7 @@ public class PurpurWorldConfig {
             dropsMap.forEach((itemId, chance) -> {
                 Item item = BuiltInRegistries.ITEM.get(new ResourceLocation(itemId.toString()));
                 if (item == Items.AIR) { PurpurConfig.log(Level.SEVERE, "Invalid item for `tools.axe.waxables." + blockId + ".drops`: " + itemId); return; }
-                drops.put(item, (double) chance);
+                drops.put(item, (Double) chance); // Leaf - Fix casting
             });
             axeWaxables.put(block, new Waxable(into, drops));
         });
@@ -777,7 +777,7 @@ public class PurpurWorldConfig {
             dropsMap.forEach((itemId, chance) -> {
                 Item item = BuiltInRegistries.ITEM.get(new ResourceLocation(itemId.toString()));
                 if (item == Items.AIR) { PurpurConfig.log(Level.SEVERE, "Invalid item for `tools.axe.weatherables." + blockId + ".drops`: " + itemId); return; }
-                drops.put(item, (double) chance);
+                drops.put(item, (Double) chance); // Leaf - Fix casting
             });
             axeWeatherables.put(block, new Weatherable(into, drops));
         });
@@ -803,7 +803,7 @@ public class PurpurWorldConfig {
             dropsMap.forEach((itemId, chance) -> {
                 Item item = BuiltInRegistries.ITEM.get(new ResourceLocation(itemId.toString()));
                 if (item == Items.AIR) { PurpurConfig.log(Level.SEVERE, "Invalid item for `tools.hoe.tillables." + blockId + ".drops`: " + itemId); return; }
-                drops.put(item, (double) chance);
+                drops.put(item, (Double) chance); // Leaf - Fix casting
             });
             hoeTillables.put(block, new Tillable(condition, into, drops));
         });
@@ -827,7 +827,7 @@ public class PurpurWorldConfig {
             dropsMap.forEach((itemId, chance) -> {
                 Item item = BuiltInRegistries.ITEM.get(new ResourceLocation(itemId.toString()));
                 if (item == Items.AIR) { PurpurConfig.log(Level.SEVERE, "Invalid item for `tools.shovel.flattenables." + blockId + ".drops`: " + itemId); return; }
-                drops.put(item, (double) chance);
+                drops.put(item, (Double) chance); // Leaf - Fix casting
             });
             shovelFlattenables.put(block, new Flattenable(into, drops));
         });
